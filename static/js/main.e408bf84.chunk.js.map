{"version":3,"sources":["TimerProvider.js","components/documentation/DocumentComponent.js","components/generic/Loading.js","views/DocumentationView.js","components/generic/Button/Button.js","components/generic/DisplayTime/DisplayTime.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","components/generic/Selector/Selector.js","utils/helpers.js","components/selectors/StopwatchSelect.js","components/selectors/CountdownSelect.js","components/selectors/XYSelect.js","components/selectors/TabataSelect.js","views/AddView.js","App.js","index.js"],"names":["TimerContext","React","createContext","TimerProvider","_ref","children","timers","setTimers","useState","isRunning","setIsRunning","totalTime","setTotalTime","isReset","setIsReset","activeTimerIndex","setActiveTimerIndex","restart","map","timer","status","createElement","Provider","value","totalTimeCalc","minutes","forEach","val","seconds","nextTimer","length","startStop","remove","_ref2","id","i","indexOf","newTimers","slice","Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","Title","_templateObject3","RenderComponent","_templateObject4","Documentation","table","_templateObject5","DocumentComponent","title","component","propDocs","doc","index","key","prop","description","type","defaultValue","primaryColor","sizeMapping","small","medium","large","Dot","span","props","size","color","DotGroup","Loading","Button","text","btnProps","Object","assign","className","Screen","displayStyle","Stopwatch","useContext","time","setTime","useEffect","intervalId","setInterval","clearInterval","minutesCalc","Math","floor","secondsCalc","DisplayTime","Countdown","XY","rounds","roundsCount","setRoundsCount","Tabata","work","rest","workStatus","setWorkStatus","Timers","Timer","ControlButtons","TimerTitle","TimersView","Link","to","onClick","concat","Selector","label","numbers","selectProps","name","makeId","result","characters","charactersLength","charAt","random","StopwatchSelect","setMinutes","setSeconds","clicked","setClicked","minNumbers","Array","keys","number","secNumbers","onChange","e","target","handleTimer","CountdownSelect","XYSelect","setRounds","roundNumbers","TabataSelect","setWork","setRest","Selectors","SelectorTitle","AddView","selectors","C","Nav","App","Router","Routes","Route","path","element","DocumentationView","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e408bf84.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\n\nexport const TimerContext = React.createContext({});\n\nconst TimerProvider = ({ children }) => {\n    const [timers, setTimers] = useState([]);\n    const [isRunning, setIsRunning] = useState(null);\n    const [totalTime, setTotalTime] = useState(0);\n    const [isReset, setIsReset] = useState(null);\n\n    // Current running timer\n    const [activeTimerIndex, setActiveTimerIndex] = useState(0); \n    \n    const totalTimeCalc = () => {\n        const totalMin = timers.map((timer) => timer.minutes)\n        totalMin.forEach((val) => setTotalTime(totalTime+val))\n\n        const totalSec = timers.map((timer) => timer.seconds)\n        totalSec.forEach((val) => setTotalTime(totalTime+val))\n    }\n    \n    const nextTimer = () => {\n        if (activeTimerIndex === timers.length-1) {\n            timers[activeTimerIndex].status = \"complete\"\n            setTimers(timers)\n            restart()\n        }\n        else {\n            timers[activeTimerIndex].status = \"complete\"\n            timers[activeTimerIndex+1].status = \"running\"\n            setActiveTimerIndex(activeTimerIndex+1)\n            setTimers(timers)\n        }\n    }\n\n    // Restart timer\n    const restart = () => {\n        setIsReset(true)\n        setIsRunning(null)\n        setActiveTimerIndex(0)\n        timers.map((timer) => timer.status = \"ready\")\n        timers[0].status = \"running\"\n        setTimers(timers)\n    }\n\n    // Start or stop timer\n    const startStop = () => {\n        if (isRunning) {\n            setIsRunning(null)\n        } else {\n            setIsRunning(true)\n            setIsReset(null)\n        }\n    }\n\n    // Delete from queue\n    const remove = ({id}) => {\n\n        if (timers.length === 1) {\n            setTimers([])\n        }\n\n        else {\n            const match = timers.map((timer) => timer.id === id)\n            const i = match.indexOf(true)\n\n            if (i === 0) {\n                // Update timer list\n                const newTimers = timers.slice(1)\n                newTimers[0].status = \"running\"\n                setTimers(newTimers)\n\n                // recalculate total time\n                const minusMin = timers.map((timer) => timer.minutes)\n                minusMin.forEach((val) => setTotalTime(totalTime-val))\n\n                const minusSec = timers.map((timer) => timer.seconds)\n                minusSec.forEach((val) => setTotalTime(totalTime-val))\n            }\n    \n            else {\n                // Update timer list\n                setTimers([\n                 ...timers.slice(0, i),\n                 ...timers.slice(i + 1),\n               ])\n\n               // recalculate total time\n               const minusMin = timers.map((timer) => timer.minutes)\n               minusMin.forEach((val) => setTotalTime(totalTime-val))\n\n               const minusSec = timers.map((timer) => timer.seconds)\n               minusSec.forEach((val) => setTotalTime(totalTime-val))\n            }\n        }\n\n        setActiveTimerIndex(0)\n    }\n\n    return (\n        <TimerContext.Provider\n            value={{\n                timers,\n                setTimers,\n                isRunning,\n                setIsRunning,\n                totalTime,\n                setTotalTime,\n                totalTimeCalc,\n                activeTimerIndex,\n                setActiveTimerIndex,\n                nextTimer,\n                restart,\n                startStop,\n                isReset,\n                setIsReset,\n                remove\n            }}\n        >{children}</TimerContext.Provider>\n    )\n};\n\nexport default TimerProvider","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = ({ title, component, propDocs }) => {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      <Container>\n        <RenderComponent>{component}</RenderComponent>\n        <Documentation>\n          <thead>\n            <tr>\n              <th>Prop</th>\n              <th>Description</th>\n              <th>Type</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {propDocs.map((doc, index) => {\n              return (\n                <tr key={index}>\n                  <td>{doc.prop}</td>\n                  <td>{doc.description}</td>\n                  <td>{doc.type}</td>\n                  <td>\n                    <code>{doc.defaultValue}</code>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Documentation>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = ({ size = \"medium\", color = primaryColor }) => {\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={sizeMapping[size]} color={color} />\n        <Dot size={sizeMapping[size]} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={sizeMapping[size]} color={color} />\n        <Dot size={sizeMapping[size]} color={color} />\n      </DotGroup>\n    </Container>\n  );\n};\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nexport default Loading;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\n/**\n * You can document your components by using the DocumentComponent component\n */\nconst Documentation = () => {\n  return (\n    <Container>\n      <div>\n        <Title>Documentation</Title>\n        <DocumentComponent\n          title=\"Loading spinner \"\n          component={<Loading />}\n          propDocs={[\n            {\n              prop: \"size\",\n              description: \"Changes the size of the loading spinner\",\n              type: \"string\",\n              defaultValue: \"medium\",\n            },\n          ]}\n        />\n      </div>\n    </Container>\n  );\n};\n\nexport default Documentation;\n","import React from 'react'\nimport \"./Button.css\";\n\nconst Button = ({ color, text, ...btnProps }) => {\n  return (\n    <button \n      className={color}\n      {...btnProps}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport \"./DisplayTime.css\";\n\nconst Screen = ({ minutes, seconds, displayStyle }) => {\n    return (\n      <div className={displayStyle}>\n        {minutes}m\n        {seconds}s\n      </div>\n    );\n  };\n  \n  export default Screen;\n  ","import React from 'react'\nimport { useState, useEffect, useContext } from \"react\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport { TimerContext } from '../../TimerProvider';\n\nconst Stopwatch = ({minutes, seconds, id, status}) => {\n    // Store the time and button\n    const {isRunning, nextTimer, isReset} = useContext(TimerContext)\n    const [time, setTime] = useState(0);\n\n    // Credit for setInterval & math.floor:\n    // https://medium.com/how-to-react/simple-way-to-create-a-stopwatch-in-react-js-bcc0e08e041e\n\n     useEffect(() => {\n        let intervalId;\n\n        if (isRunning && status === \"running\" && time >= 0) {\n            intervalId = setInterval(() => {setTime(time + 1)}, 7);\n        }\n     \n        if (isRunning && time === (minutes+seconds) && status === \"running\") {\n            nextTimer()\n            setTime(0)\n        }\n\n        else if (status === \"complete\" || isReset){\n            setTime(0)\n        }\n\n        return () => clearInterval(intervalId);\n        \n      }, [isReset, isRunning, minutes, nextTimer, seconds, status, time]);\n\n    \n    // // Minutes calculation\n    const minutesCalc = Math.floor((time % 360000) / 6000);\n\n    // Seconds calculation\n    const secondsCalc = Math.floor((time % 6000) / 100);\n\n    return (\n        <div className=\"grid-container\">\n            Stopwatch: {minutes/6000}m{seconds/100}s\n            <DisplayTime\n                minutes={minutesCalc}\n                seconds={secondsCalc}\n                displayStyle={status === \"running\" ? \"Default-display Running\" : (status === \"complete\" ? \"Default-display Complete\" : \"Default-display\")}/>\n        </div>\n    )\n};\n\nexport default Stopwatch;\n","import React from 'react'\nimport { useState, useEffect, useContext } from \"react\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport { TimerContext } from '../../TimerProvider';\n\nconst Countdown = ({minutes, seconds, id, status}) => {\n    // Store the time and button\n    const {isRunning, nextTimer, isReset} = useContext(TimerContext)\n    const [time, setTime] = useState(minutes+seconds);\n\n    useEffect(() => {\n        let intervalId;\n        \n        if (isRunning && status === \"running\" && time > 0) {\n            intervalId = setInterval(() => {setTime(time - 1)}, 7);\n        }\n     \n        else if (isRunning && time === 0 && status === \"running\") {\n            nextTimer()\n            setTime(minutes+seconds)\n        }\n        else if (status === \"complete\" || isReset){\n            setTime(minutes+seconds)\n        }\n        return () => clearInterval(intervalId);\n\n      }, [isRunning, nextTimer, status, time, minutes, seconds, isReset]);\n\n    // Minutes calculation\n    const minutesCalc = Math.floor((time % 360000) / 6000);\n \n    // Seconds calculation\n    const secondsCalc = Math.floor((time % 6000) / 100);\n\n    return (\n        <div className=\"grid-container\">\n            Countdown: {minutes/6000}m{seconds/100}s\n            <DisplayTime\n                minutes={minutesCalc}\n                seconds={secondsCalc}\n                displayStyle={status === \"running\" ? \"Default-display Running\" : (status === \"complete\" ? \"Default-display Complete\" : \"Default-display\")}/>\n        </div>\n    )\n};\n\nexport default Countdown;\n","import React from 'react'\nimport { useState, useEffect, useContext } from \"react\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport { TimerContext } from '../../TimerProvider';\n\nconst XY = ({minutes, seconds, rounds, id, status}) => {\n    // Store the time and button\n    const {isRunning, nextTimer, isReset} = useContext(TimerContext)\n    const [time, setTime] = useState(minutes+seconds);\n    const [roundsCount, setRoundsCount] = useState(rounds)\n\n    useEffect(() => {\n        let intervalId;\n\n        if (isRunning && status === \"running\" && time > 0) {\n            // setting time from 0 to 1 every 10 millisecond using javascript setInterval method\n            intervalId = setInterval(() => setTime(time - 1), 7);\n            }\n        else if (isRunning && status === \"running\" && time === 0 && rounds >= 1) {\n            setTime(minutes+seconds+99)\n            setRoundsCount(roundsCount-1)\n            intervalId = setInterval(() => setTime(time - 1), 7);\n        }\n        if (roundsCount === 0){\n            nextTimer()\n            setTime(minutes+seconds)\n            setRoundsCount(rounds)\n        }\n        else if (status === \"complete\" || isReset){\n            setTime(minutes+seconds)\n            setRoundsCount(rounds)\n        }\n        return () => clearInterval(intervalId);\n\n      }, [isRunning, time, roundsCount, minutes, seconds, rounds, isReset, nextTimer, status]);\n\n    // Minutes calculation\n    const minutesCalc = Math.floor((time % 360000) / 6000);\n \n    // Seconds calculation\n    const secondsCalc = Math.floor((time % 6000) / 100);\n\n    return (\n        <div className=\"grid-container\">\n            XY: {minutes/6000}m{seconds/100}s for {rounds} rounds\n            <DisplayTime\n                minutes={minutesCalc}\n                seconds={secondsCalc}\n                displayStyle={status === \"running\" ? \"Default-display Running\" : (status === \"complete\" ? \"Default-display Complete\" : \"Default-display\")}/>\n        </div>\n    )\n};\n\nexport default XY;\n","import React from 'react'\nimport { useState, useEffect, useContext } from \"react\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport { TimerContext } from '../../TimerProvider';\n\nconst Tabata = ({work, rest, rounds, id, status}) => {\n    // Store the time and button\n    const {isRunning, nextTimer, isReset} = useContext(TimerContext)\n    const [time, setTime] = useState(work);\n    const [roundsCount, setRoundsCount] = useState(rounds)\n    const [workStatus, setWorkStatus] = useState(true)\n\n    useEffect(() => {\n        let intervalId;\n\n        if (isRunning && status === \"running\" && time !==0 && roundsCount > 0) {\n            // setting time from 0 to 1 every 10 millisecond using javascript setInterval method\n            intervalId = setInterval(() => setTime(time - 1), 7);\n            }\n\n        if (isRunning && status === \"running\" && workStatus && time === 0 && roundsCount > 0) {\n            setTime(rest+99)\n            setWorkStatus(null)\n            intervalId = setInterval(() => setTime(time - 1), 7);\n        }\n\n        if (isRunning && status === \"running\" && workStatus === null && time === 0 && roundsCount > 0) {\n            setTime(work+99 )\n            setWorkStatus(true)\n            setRoundsCount(roundsCount-1) \n            intervalId = setInterval(() => setTime(time - 1), 7);\n        }\n        \n        else if(roundsCount === 0){\n            nextTimer()\n            setTime(work)\n            setRoundsCount(rounds)\n            setWorkStatus(true)\n        }\n\n        else if (status === \"complete\" || isReset){\n            setTime(work)\n            setRoundsCount(rounds)\n            setWorkStatus(true)\n        }\n\n        return () => clearInterval(intervalId);\n\n      }, [isReset, isRunning, nextTimer, rest, rounds, roundsCount, status, time, work, workStatus]);\n \n    // Seconds calculation\n    const seconds = Math.floor((time % 6000) / 100);\n\n    return (\n    <div className=\"grid-container\">\n        Tabata: {work/100}s work, {rest/100}s rest for {rounds} rounds\n        <DisplayTime\n            minutes=\"0\"\n            seconds={seconds}\n            displayStyle={status === \"running\" ? \"Default-display Running\" : (status === \"complete\" ? \"Default-display Complete\" : \"Default-display\")}/>\n        </div>\n    )\n};\n\nexport default Tabata;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { TimerContext } from \"../TimerProvider\";\nimport { Link } from \"react-router-dom\";\n\nimport Button from \"../components/generic/Button/Button\";\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\n\nconst Timers = styled.div`\n  display: grid;\n  align-items: center;\n  grid-template-columns: auto auto;\n  justify-content: center;\n`;\n\nconst Timer = styled.div`\n  border: 1px solid gray;\n  padding: 20px;\n  margin: 10px;\n  font-size: 1.5rem;\n`;\n\nconst ControlButtons = styled.div`\n  display: grid;\n  grid-template-columns: auto;\n  align-items: center;\n  padding: 20px;\n  margin: 10px;\n  font-size: 1.5rem;\n`;\n\nconst TimerTitle = styled.div``;\n\nconst TimersView = () => { \n  const {timers, totalTime, isRunning, restart, startStop, nextTimer, isReset, remove} = useContext(TimerContext)\n\n  // Minutes calculation\n  const minutesCalc = Math.floor((totalTime % 360000) / 6000);\n \n  // Seconds calculation\n  const secondsCalc = Math.floor((totalTime % 6000) / 100);\n\n  // const handleRemoval = (id) => {\n  //   setTimers(timers.filter(timer => timer.id !== id))\n  // }\n\n  return (\n    <ControlButtons>\n      <Link to=\"/add\"><Button text=\"+ Add timer\" color={\"Default-button Button-add\"} /></Link><br></br>\n      <Button \n        text={isRunning ? \"Pause workout\" : \"Start workout\"}\n        onClick={timers.length === 0 ? null : startStop}\n        color={isRunning ? \"Default-button Button-danger\":\"Default-button Button-go\"} />\n      <Button \n        text={\"Skip timer >>\"}\n        color={\"Default-button\"}\n        onClick={timers.length === 0 ? null : nextTimer} />\n      <Button \n        text={\"Restart workout\"}\n        color={\"Default-button\"}\n        onClick={timers.length === 0 ? null : restart} />\n    <h2>Total time: {minutesCalc}m{secondsCalc}s</h2>\n    <Timers>\n      {timers.map((timer) => (\n        <Timer key={`timer-${timer.id}`}>\n          <TimerTitle>{timer.title}</TimerTitle>\n          {timer.type === \"stopwatch\" && <Stopwatch \n                                          id={timer.id}\n                                          minutes={timer.minutes} \n                                          seconds={timer.seconds}\n                                          status={timer.status} \n                                          isReset={isReset}/>}\n          {timer.type === \"countdown\" && <Countdown \n                                          id={timer.id}\n                                          minutes={timer.minutes} \n                                          seconds={timer.seconds}\n                                          status={timer.status}\n                                          isReset={isReset}/>}\n          {timer.type === \"xy\" && <XY \n                                    id={timer.id}\n                                    minutes={timer.minutes} \n                                    seconds={timer.seconds}\n                                    rounds={timer.rounds}\n                                    status={timer.status}\n                                    isReset={isReset}/>}\n\n          {timer.type === \"tabata\" && <Tabata \n                                        id={timer.id}\n                                        work={timer.work} \n                                        rest={timer.rest}\n                                        rounds={timer.rounds}\n                                        status={timer.status}\n                                        isReset={isReset}/>}\n          <Button \n              text={\"Remove\"}\n              color={\"Default-button Button-danger\"}\n              onClick={() => remove({id:timer.id})}/>\n        </Timer>\n      ))}\n    </Timers>\n    </ControlButtons>\n  );\n};\n\nexport default TimersView;\n","import React from 'react'\nimport \"./Selector.css\";\n\nconst Selector = ({ label, numbers, ...selectProps }) => {\n\n  return (\n    <label>\n      <select\n        className=\"default\"\n        name=\"selectedTime\"\n        {...selectProps}>\n        {numbers}\n      </select>\n      {label}\n    </label>\n  );\n};\n\nexport default Selector;","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\n\nexport const makeId = () => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < 20; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  };\n\n\n","import React, { useContext, useState, useEffect } from 'react'\nimport Button from \"../generic/Button/Button\";\nimport Selector from \"../generic/Selector/Selector\";\nimport { TimerContext } from '../../TimerProvider';\nimport { makeId } from '../../utils/helpers';\n\nconst StopwatchSelect = () => { \n\n    const {timers, setTimers, totalTime, setTotalTime} = useContext(TimerContext)\n    const [minutes, setMinutes] = useState(0)\n    const [seconds, setSeconds] = useState(500)\n    const [clicked, setClicked] = useState(null)\n\n    useEffect(() => {\n        let intervalId;\n        \n        if (clicked) {\n            intervalId = setInterval(() => {setClicked(null)}, 1000);\n        }\n        return () => clearInterval(intervalId);\n\n      }, [clicked, setClicked]);\n\n    // Show numbers for minutes and seconds\n    const minNumbersList = [...Array(60).keys()]\n    const minNumbers = minNumbersList.map(number =>\n        <option value={number} key={number}>{number}</option>)\n\n    const secNumbersList = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n     const secNumbers = secNumbersList.map(number =>\n            <option value={number} key={number}>{number}</option>)\n\n    const handleTimer = () => {\n        setTimers(\n            [...timers, \n            {id: makeId(),\n            minutes: minutes,\n            seconds: seconds,\n            type: \"stopwatch\",\n            status: timers.length === 0 ? \"running\" : \"ready\"}])\n        setTotalTime(totalTime+minutes+seconds)\n        setClicked(true)}\n\n    return (\n        <div className=\"grid-container\">\n            <Selector \n                label=\"min\"\n                onChange={e => setMinutes(e.target.value*6000)}\n                numbers={minNumbers}/>\n            <Selector \n                label=\"sec\"\n                onChange={e => setSeconds(e.target.value*100)}\n                numbers={secNumbers}/>\n            <Button \n                text={clicked ? \"Added ✓\" : \"Add\"}\n                color={clicked ? \"Default-button Button-go\" : \"Default-button\"}\n                onClick={handleTimer}/>\n        </div>\n    )\n};\n\nexport default StopwatchSelect;\n","import React, { useContext, useState, useEffect } from 'react'\nimport Button from \"../generic/Button/Button\";\nimport Selector from \"../generic/Selector/Selector\";\nimport { TimerContext } from '../../TimerProvider';\nimport { makeId } from '../../utils/helpers';\n\nconst CountdownSelect = () => { \n\n    const {timers, setTimers, totalTime, setTotalTime} = useContext(TimerContext)\n    const [minutes, setMinutes] = useState(0)\n    const [seconds, setSeconds] = useState(500)\n    const [clicked, setClicked] = useState(null)\n\n    useEffect(() => {\n        let intervalId;\n        \n        if (clicked) {\n            intervalId = setInterval(() => {setClicked(null)}, 1000);\n        }\n        return () => clearInterval(intervalId);\n\n      }, [clicked, setClicked]);\n\n    // Show 59 numbers for minutes and seconds\n    const minNumbersList = [...Array(60).keys()]\n    const minNumbers = minNumbersList.map(number =>\n        <option value={number} key={number}>{number}</option>)\n\n    const secNumbersList = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n     const secNumbers = secNumbersList.map(number =>\n            <option value={number} key={number}>{number}</option>)\n\n    const handleTimer = () => {\n        setTimers(\n            [...timers, \n            {id: makeId(),\n            minutes: minutes,\n            seconds: seconds,\n            type: \"countdown\",\n            status: timers.length === 0 ? \"running\" : \"ready\"}])\n        setTotalTime(totalTime+minutes+seconds)\n        setClicked(true)}\n\n    return (\n        <div className=\"grid-container\">\n            <Selector \n                label=\"min\"\n                onChange={e => setMinutes(e.target.value*6000)}\n                numbers={minNumbers}/>\n            <Selector \n                label=\"sec\"\n                onChange={e => setSeconds(e.target.value*100)}\n                numbers={secNumbers}/>\n            <Button \n                text={clicked ? \"Added ✓\" : \"Add\"}\n                color={clicked ? \"Default-button Button-go\" : \"Default-button\"}\n                onClick={handleTimer}/>\n        </div>\n    )\n};\n\nexport default CountdownSelect;\n","import React, { useContext, useState, useEffect } from 'react'\nimport Button from \"../generic/Button/Button\";\nimport Selector from \"../generic/Selector/Selector\";\nimport { TimerContext } from '../../TimerProvider';\nimport { makeId } from '../../utils/helpers';\n\nconst XYSelect = () => { \n    \n    const {timers, setTimers, totalTime, setTotalTime} = useContext(TimerContext)\n    const [minutes, setMinutes] = useState(0)\n    const [seconds, setSeconds] = useState(500)\n    const [rounds, setRounds] = useState(1)\n    const [clicked, setClicked] = useState(null)\n\n    useEffect(() => {\n        let intervalId;\n        \n        if (clicked) {\n            intervalId = setInterval(() => {setClicked(null)}, 1000);\n        }\n        return () => clearInterval(intervalId);\n\n      }, [clicked, setClicked]);\n\n    // Show numbers for minutes and seconds\n    const minNumbersList = [...Array(60).keys()]\n    const minNumbers = minNumbersList.map(number =>\n        <option value={number} key={number}>{number}</option>)\n\n    const secNumbersList = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n     const secNumbers = secNumbersList.map(number =>\n            <option value={number} key={number}>{number}</option>)\n    \n    // Show max 30 rounds\n    const roundNumbersList = [...Array(31).keys()]\n    const roundNumbers = roundNumbersList.slice(1).map(number =>\n        <option value={number} key={number}>{number}</option>)\n\n    const handleTimer = () => {\n        setTimers(\n            [...timers, \n            {id: makeId(),\n            minutes: minutes,\n            seconds: seconds,\n            rounds: rounds,\n            type: \"xy\",\n            status: timers.length === 0 ? \"running\" : \"ready\"}])\n        setTotalTime(totalTime+minutes+seconds)\n        setClicked(true)}\n\n    return (\n        <div className=\"grid-container\">\n            <Selector \n                label=\"min\"\n                onChange={e => setMinutes(e.target.value*6000)}\n                numbers={minNumbers}/>\n            <Selector \n                label=\"sec\"\n                onChange={e => setSeconds(e.target.value*100)}\n                numbers={secNumbers}/>\n            <Selector \n                label=\"rounds\"\n                onChange={e => setRounds(e.target.value*1)}\n                numbers={roundNumbers}/>\n            <Button \n                text={clicked ? \"Added ✓\" : \"Add\"}\n                color={clicked ? \"Default-button Button-go\" : \"Default-button\"}\n                onClick={handleTimer}/>\n        </div>\n    )\n};\n\nexport default XYSelect;\n","import React, { useContext, useState, useEffect } from 'react'\nimport Button from \"../generic/Button/Button\";\nimport Selector from \"../generic/Selector/Selector\";\nimport { TimerContext } from '../../TimerProvider';\nimport { makeId } from '../../utils/helpers';\n\nconst TabataSelect = () => { \n\n    const {timers, setTimers, totalTime, setTotalTime} = useContext(TimerContext)\n    const [work, setWork] = useState(500)\n    const [rest, setRest] = useState(500)\n    const [rounds, setRounds] = useState(1)\n    const [clicked, setClicked] = useState(null)\n\n    useEffect(() => {\n        let intervalId;\n        \n        if (clicked) {\n            intervalId = setInterval(() => {setClicked(null)}, 1000);\n        }\n        return () => clearInterval(intervalId);\n\n      }, [clicked, setClicked]);\n    \n    // Show numbers for seconds\n    const secNumbersList = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n     const secNumbers = secNumbersList.map(number =>\n            <option value={number} key={number}>{number}</option>)\n    \n    // Show max 30 rounds\n    const roundNumbersList = [...Array(31).keys()]\n    const roundNumbers = roundNumbersList.slice(1).map(number =>\n        <option value={number} key={number}>{number}</option>)\n\n    const handleTimer = () => {\n        setTimers(\n            [...timers, \n            {id: makeId(),\n            work: work,\n            rest: rest,\n            rounds: rounds,\n            type: \"tabata\",\n            status: timers.length === 0 ? \"running\" : \"ready\"}])\n        setTotalTime(totalTime+work+rest)\n        setClicked(true)}\n\n    return (\n        <div className=\"grid-container\">\n            <Selector \n                label=\"sec\"\n                onChange={e => setWork(e.target.value*100)}\n                numbers={secNumbers}/>\n            <Selector \n                label=\"sec\"\n                onChange={e => setRest(e.target.value*100)}\n                numbers={secNumbers}/>\n            <Selector \n                label=\"rounds\"\n                onChange={e => setRounds(e.target.value*1)}\n                numbers={roundNumbers}/>\n            <Button \n                text={clicked ? \"Added ✓\" : \"Add\"}\n                color={clicked ? \"Default-button Button-go\" : \"Default-button\"}\n                onClick={handleTimer}/>\n        </div>\n    )\n};\n\nexport default TabataSelect;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport StopwatchSelect from \"../components/selectors/StopwatchSelect\";\nimport CountdownSelect from \"../components/selectors/CountdownSelect\";\nimport XYSelect from \"../components/selectors/XYSelect\";\nimport TabataSelect from \"../components/selectors/TabataSelect\";\n\nconst Selectors = styled.div`\n  display: grid;\n  align-items: center;\n  grid-template-columns: auto auto;\n  justify-content: center;\n`;\n\nconst Selector = styled.div`\n  border: 1px solid gray;\n  padding: 20px;\n  margin: 10px;\n  font-size: 1.5rem;\n`;\n\nconst SelectorTitle = styled.div``;\n\n\nconst AddView = () => {\n\n  const selectors = [\n    { title: \"Stopwatch\", C: <StopwatchSelect /> },\n    { title: \"Countdown\", C: <CountdownSelect /> },\n    { title: \"XY\", C: <XYSelect /> },\n    { title: \"Tabata\", C: <TabataSelect /> },\n  ];\n\n  return (\n    <Selectors>\n      {selectors.map((selectors) => (\n        <Selector key={`timer-${selectors.title}`}>\n          <SelectorTitle>{selectors.title}</SelectorTitle>\n          {selectors.C}\n        </Selector>\n      ))}\n    </Selectors>\n  );\n};\n\nexport default AddView;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport TimerProvider from \"./TimerProvider\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\nimport AddView from \"./views/AddView\";\n\nconst Container = styled.div`\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n`;\n\nconst Nav = () => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Timers</Link>\n        </li>\n        <li>\n          <Link to=\"/docs\">Documentation</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nconst App = () => {\n  return (\n    <TimerProvider>\n      <Container>\n        <Router>\n          <Nav />\n          <Routes>\n            <Route path=\"/docs\" element={<DocumentationView />} />\n            <Route path=\"/\" element={<TimersView />} />\n            <Route path=\"/add\" element={<AddView />} />\n          </Routes>\n        </Router>\n      </Container>\n    </TimerProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}